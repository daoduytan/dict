{"version":3,"sources":["../node_modules/@uifabric/foundation/lib/utilities.js","../node_modules/@uifabric/foundation/lib/slots.js","../node_modules/@uifabric/foundation/lib/createComponent.js","../node_modules/office-ui-fabric-react/lib/components/Stack/StackUtils.js","../node_modules/office-ui-fabric-react/lib/components/Stack/Stack.styles.js","../node_modules/office-ui-fabric-react/lib/components/Stack/StackItem/StackItem.styles.js","../node_modules/office-ui-fabric-react/lib/components/Stack/StackItem/StackItem.js","../node_modules/office-ui-fabric-react/lib/components/Stack/Stack.js","../node_modules/@uifabric/react-cards/lib/components/Card/CardItem/CardItem.styles.js","../node_modules/@uifabric/react-cards/lib/components/Card/CardItem/CardItem.js","../node_modules/@uifabric/react-cards/lib/components/Card/CardItem/CardItem.view.js","../node_modules/@uifabric/react-cards/lib/components/Card/CardSection/CardSection.styles.js","../node_modules/@uifabric/react-cards/lib/components/Card/CardSection/CardSection.js","../node_modules/@uifabric/react-cards/lib/components/Card/CardSection/CardSection.view.js","../node_modules/@uifabric/react-cards/lib/components/Card/Card.styles.js","../node_modules/@uifabric/react-cards/lib/components/Card/Card.js","../node_modules/@uifabric/react-cards/lib/components/Card/Card.view.js"],"names":["utilities_assign","tslib_es6","withSlots","type","props","children","_i","arguments","length","slotType","isSlot","react","count","toArray","apply","concat","createFactory","DefaultComponent","options","_a","defaultProp","componentProps","userProps","userSlotOptions","defaultStyles","finalProps","allProps","classNames","allProps_1","push","className","Object","lib","_constructFinalProps","slotProps","transformedProps","_translateShorthand","component","UserComponent","render","defaultFactory","memoize","getSlots","slots","result","mixedProps","_loop_1","name_1","hasOwnProperty","slot","args","Error","ComponentType","slotOptions","undefined","create","_renderSlot","_defaultStyles","createComponent","view","factoryOptions","displayName","context","fields","settings","CustomizerContext","Customizations","getSettings","customizations","useState","state","theme","tokens","_resolveTokens","allTokens","allTokens_1","currentTokens","Array","isArray","styles","allStyles","map","_resolveStyles","viewProps","name","statics","_getThemedSpacing","space","spacing","_getValueUnitGap","gap","numericalPart","parseFloat","numericalValue","isNaN","numericalString","toString","value","unit","substring","parsePadding","padding","paddingValues","split","reduce","padding1","padding2","nameMap","start","end","GlobalClassNames","root","inner","StackItem_styles_GlobalClassNames","alignMap","StackItem","grow","shrink","disableShrink","align","verticalFill","order","fonts","medium","margin","height","width","flexGrow","flexShrink","alignSelf","StackItemType","Stack","as","RootType","wrap","rest","warnDeprecations","maxHeight","maxWidth","stackChildren","child","index","defaultItemProps","nativeProps","properties","Slots","_b","_c","_d","_e","_f","_g","horizontal","reversed","horizontalAlign","verticalAlign","childrenGap","_h","rowGap","columnGap","splitGap","calculatedGap","parseGap","horizontalMargin","verticalMargin","childStyles","textOverflow","commonSelectors","> *:not(.ms-StackItem)","flexWrap","overflow","display","marginLeft","marginRight","marginTop","marginBottom","boxSizing","selectors","> *","flexDirection","Item","CardItem_styles_GlobalClassNames","baseTokens","filledTokens","CardItem","large","fill","CardSection_styles_GlobalClassNames","CardSection_styles_baseTokens","CardSection_styles_filledTokens","CardSection","Card_styles_GlobalClassNames","Card_styles_baseTokens","boxShadow","effects","elevation4","childrenMargin","cursor","highContrastBoxShadow","minHeight","minWidth","compactTokens","clickableTokens","boxShadowHovered","elevation8","highContrastBoxShadowHovered","__webpack_require__","d","__webpack_exports__","Card","compact","CardItemType","CardSectionType","childrenCount","cardChildren","childTokens","childRest","firstMargin","lastMargin","resolvedTokens","warn","borderRadius","transition",":hover","onClick","Section"],"mappings":"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","file":"static/js/0.ef502e89.chunk.js","sourcesContent":["import { __assign } from 'tslib';\nexport var assign = __assign;","import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { mergeStyles } from '@uifabric/styling';\nimport { memoizeFunction } from '@uifabric/utilities';\nimport { assign } from './utilities';\n/**\n * This function is required for any module that uses slots.\n *\n * This function is a slot resolver that automatically evaluates slot functions to generate React elements.\n * A byproduct of this resolver is that it removes slots from the React hierarchy by bypassing React.createElement.\n *\n * To use this function on a per-file basis, use the jsx directive targeting withSlots.\n * This directive must be the FIRST LINE in the file to work correctly.\n * Usage of this pragma also requires withSlots import statement.\n *\n * See React.createElement\n */\n// Can't use typeof on React.createElement since it's overloaded. Approximate createElement's signature for now and widen as needed.\n\nexport function withSlots(type, props) {\n  // tslint:disable-next-line:missing-optional-annotation\n  var children = [];\n\n  for ( // tslint:disable-next-line:missing-optional-annotation\n  var _i = 2; // tslint:disable-next-line:missing-optional-annotation\n  _i < arguments.length; // tslint:disable-next-line:missing-optional-annotation\n  _i++) {\n    // tslint:disable-next-line:missing-optional-annotation\n    children[_i - 2] = arguments[_i];\n  }\n\n  var slotType = type;\n\n  if (slotType.isSlot) {\n    // TODO: There is something weird going on here with children embedded in props vs. rest args.\n    // Comment out these lines to see. Make sure this function is doing the right things.\n    var numChildren = React.Children.count(children);\n\n    if (numChildren === 0) {\n      return slotType(props);\n    } // Since we are bypassing createElement, use React.Children.toArray to make sure children are properly assigned keys.\n    // TODO: should this be mutating? does React mutate children subprop with createElement?\n    // TODO: will toArray clobber existing keys?\n    // TODO: React generates warnings because it doesn't detect hidden member _store that is set in createElement.\n    //        Even children passed to createElement without keys don't generate this warning.\n    //        Is there a better way to prevent slots from appearing in hierarchy? toArray doesn't address root issue.\n\n\n    children = React.Children.toArray(children);\n    return slotType(tslib_1.__assign({}, props, {\n      children: children\n    }));\n  } else {\n    // TODO: Are there some cases where children should NOT be spread? Also, spreading reraises perf question.\n    //        Children had to be spread to avoid breaking KeytipData in Toggle.view:\n    //        react-dom.development.js:18931 Uncaught TypeError: children is not a function\n    //        Without spread, function child is a child array of one element\n    // TODO: is there a reason this can't be:\n    // return React.createElement.apply(this, arguments);\n    return React.createElement.apply(React, [type, props].concat(children));\n  }\n}\n/**\n * This function creates factories that render ouput depending on the user ISlotProp props passed in.\n * @param DefaultComponent - Base component to render when not overridden by user props.\n * @param options - Factory options, including defaultProp value for shorthand prop mapping.\n * @returns ISlotFactory function used for rendering slots.\n */\n\nexport function createFactory(DefaultComponent, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _a = options.defaultProp,\n      defaultProp = _a === void 0 ? 'children' : _a;\n\n  var result = function result(componentProps, userProps, userSlotOptions, defaultStyles) {\n    // If they passed in raw JSX, just return that.\n    if (React.isValidElement(userProps)) {\n      return userProps;\n    }\n\n    var flattenedUserProps = _translateShorthand(defaultProp, userProps);\n\n    var finalProps = _constructFinalProps(defaultStyles, componentProps, flattenedUserProps);\n\n    if (userSlotOptions) {\n      if (userSlotOptions.component) {\n        // TODO: Remove cast if possible. This cast is needed because TS errors on the intrinsic portion of ReactType.\n        // return <userSlotOptions.component {...finalProps} />;\n        var UserComponent = userSlotOptions.component;\n        return React.createElement(UserComponent, tslib_1.__assign({}, finalProps));\n      }\n\n      if (userSlotOptions.render) {\n        return userSlotOptions.render(finalProps, DefaultComponent);\n      }\n    }\n\n    return React.createElement(DefaultComponent, tslib_1.__assign({}, finalProps));\n  };\n\n  return result;\n}\n/**\n * Default factory for components without explicit factories.\n */\n\nvar defaultFactory = memoizeFunction(function (type) {\n  return createFactory(type);\n});\n/**\n * This function generates slots that can be used in JSX given a definition of slots and their corresponding types.\n * @param userProps - Props as pass to component.\n * @param slots - Slot definition object defining the default slot component for each slot.\n * @returns A set of created slots that components can render in JSX.\n */\n\nexport function getSlots(userProps, slots) {\n  var result = {}; // userProps already has default props mixed in by createComponent. Recast here to gain typing for this function.\n\n  var mixedProps = userProps;\n\n  var _loop_1 = function _loop_1(name_1) {\n    if (slots.hasOwnProperty(name_1)) {\n      // This closure method requires the use of withSlots to prevent unnecessary rerenders. This is because React detects\n      //  each closure as a different component (since it is a new instance) from the previous one and then forces a rerender of the entire\n      //  slot subtree. For now, the only way to avoid this is to use withSlots, which bypasses the call to React.createElement.\n      var slot = function slot(componentProps) {\n        var args = [];\n\n        for (var _i = 1; _i < arguments.length; _i++) {\n          args[_i - 1] = arguments[_i];\n        }\n\n        if (args.length > 0) {\n          // If React.createElement is being incorrectly used with slots, there will be additional arguments.\n          // We can detect these additional arguments and error on their presence.\n          throw new Error('Any module using getSlots must use withSlots. Please see withSlots javadoc for more info.');\n        } // TODO: having TS infer types here seems to cause infinite loop. use explicit types or casting to preserve typing if possible.\n        // TODO: this should be a lookup on TProps property instead of being TProps directly, which is probably causing the infinite loop\n\n\n        return _renderSlot(slots[name_1], // TODO: this cast to any is hiding a relationship issue between the first two args\n        componentProps, mixedProps[name_1], mixedProps.slots && mixedProps.slots[name_1], // _defaultStyles should always be present, but a check for existence is added to make view tests easier to use.\n        mixedProps._defaultStyles && mixedProps._defaultStyles[name_1]);\n      };\n\n      slot.isSlot = true;\n      result[name_1] = slot;\n    }\n  };\n\n  for (var name_1 in slots) {\n    _loop_1(name_1);\n  }\n\n  return result;\n}\n/**\n * Helper function that translates shorthand as needed.\n * @param defaultProp\n * @param slotProps\n */\n\nfunction _translateShorthand(defaultProp, slotProps) {\n  var _a;\n\n  var transformedProps;\n\n  if (typeof slotProps === 'string' || typeof slotProps === 'number' || typeof slotProps === 'boolean') {\n    transformedProps = (_a = {}, _a[defaultProp] = slotProps, _a);\n  } else {\n    transformedProps = slotProps;\n  }\n\n  return transformedProps;\n}\n/**\n * Helper function that constructs final styles and props given a series of props ordered by increasing priority.\n */\n\n\nfunction _constructFinalProps(defaultStyles) {\n  var allProps = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    allProps[_i - 1] = arguments[_i];\n  }\n\n  var finalProps = {};\n  var classNames = [];\n\n  for (var _a = 0, allProps_1 = allProps; _a < allProps_1.length; _a++) {\n    var props = allProps_1[_a];\n    classNames.push(props && props.className);\n    assign.apply(void 0, [finalProps].concat(props));\n  }\n\n  finalProps.className = mergeStyles(defaultStyles, classNames);\n  return finalProps;\n}\n/**\n * Render a slot given component and user props. Uses component factory if available, otherwise falls back\n * to default factory.\n * @param ComponentType Factory component type.\n * @param componentProps The properties passed into slot from within the component.\n * @param userProps The user properties passed in from outside of the component.\n */\n\n\nfunction _renderSlot(ComponentType, componentProps, userProps, slotOptions, defaultStyles) {\n  if (ComponentType.create !== undefined) {\n    return ComponentType.create(componentProps, userProps, slotOptions, defaultStyles);\n  } else {\n    // TODO: need to resolve typing / generic issues passing through memoizeFunction. for now, cast to 'unknown'\n    return defaultFactory(ComponentType)(componentProps, userProps, slotOptions, defaultStyles);\n  }\n}","import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { concatStyleSets } from '@uifabric/styling';\nimport { Customizations, CustomizerContext } from '@uifabric/utilities';\nimport { createFactory } from './slots';\nimport { assign } from './utilities';\n/**\n * Assembles a higher order component based on the following: styles, theme, view, and state.\n * Imposes a separation of concern and centralizes styling processing to increase ease of use and robustness\n * in how components use and apply styling and theming.\n *\n * Automatically merges and applies themes and styles with theme / styleprops having the highest priority.\n * State component, if provided, is passed in props for processing. Props from state / user are automatically processed\n * and styled before finally being passed to view.\n *\n * State components should contain all stateful behavior and should not generate any JSX, but rather simply call the view prop.\n * Views should simply be stateless pure functions that receive all props needed for rendering their output.\n * State component is optional. If state is not provided, created component is essentially a functional stateless component.\n *\n * @param options - component Component options. See IComponentOptions for more detail.\n */\n\nexport function createComponent(view, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _a = options.factoryOptions,\n      factoryOptions = _a === void 0 ? {} : _a;\n  var defaultProp = factoryOptions.defaultProp;\n\n  var result = function result(componentProps) {\n    var settings = _getCustomizations(options.displayName, React.useContext(CustomizerContext), options.fields);\n\n    var useState = options.state;\n\n    if (useState) {\n      // Don't assume state will return all props, so spread useState result over component props.\n      componentProps = tslib_1.__assign({}, componentProps, useState(componentProps));\n    }\n\n    var theme = componentProps.theme || settings.theme;\n\n    var tokens = _resolveTokens(componentProps, theme, options.tokens, settings.tokens, componentProps.tokens);\n\n    var styles = _resolveStyles(componentProps, theme, tokens, options.styles, settings.styles, componentProps.styles);\n\n    var viewProps = tslib_1.__assign({}, componentProps, {\n      styles: styles,\n      tokens: tokens,\n      _defaultStyles: styles\n    });\n\n    return view(viewProps);\n  };\n\n  result.displayName = options.displayName || view.name; // If a shorthand prop is defined, create a factory for the component.\n  // TODO: This shouldn't be a concern of createComponent.. factoryOptions should just be forwarded.\n  //       Need to weigh creating default factories on component creation vs. memoizing them on use in slots.tsx.\n\n  if (defaultProp) {\n    result.create = createFactory(result, {\n      defaultProp: defaultProp\n    });\n  }\n\n  assign(result, options.statics); // Later versions of TypeSript should allow us to merge objects in a type safe way and avoid this cast.\n\n  return result;\n}\n/**\n * Resolve all styles functions with both props and tokens and flatten results along with all styles objects.\n */\n\nfunction _resolveStyles(props, theme, tokens) {\n  var allStyles = [];\n\n  for (var _i = 3; _i < arguments.length; _i++) {\n    allStyles[_i - 3] = arguments[_i];\n  }\n\n  return concatStyleSets.apply(void 0, allStyles.map(function (styles) {\n    return typeof styles === 'function' ? styles(props, theme, tokens) : styles;\n  }));\n}\n/**\n * Resolve all tokens functions with props flatten results along with all tokens objects.\n */\n\n\nfunction _resolveTokens(props, theme) {\n  var allTokens = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    allTokens[_i - 2] = arguments[_i];\n  }\n\n  var tokens = {};\n\n  for (var _a = 0, allTokens_1 = allTokens; _a < allTokens_1.length; _a++) {\n    var currentTokens = allTokens_1[_a];\n\n    if (currentTokens) {\n      // TODO: why is this cast needed? TS seems to think there is a (TToken | Function) union from somewhere.\n      currentTokens = typeof currentTokens === 'function' ? currentTokens(props, theme) : currentTokens;\n\n      if (Array.isArray(currentTokens)) {\n        currentTokens = _resolveTokens.apply(void 0, [props, theme].concat(currentTokens));\n      }\n\n      assign.apply(void 0, [tokens].concat(currentTokens));\n    }\n  }\n\n  return tokens;\n}\n/**\n * Helper function for calling Customizations.getSettings falling back to default fields.\n *\n * @param displayName Displayable name for component.\n * @param context React context passed to component containing contextual settings.\n * @param fields Optional list of properties to grab from global store and context.\n */\n\n\nfunction _getCustomizations(displayName, context, fields) {\n  // TODO: do we want field props? should fields be part of IComponent and used here?\n  // TODO: should we centrally define DefaultFields? (not exported from styling)\n  // TODO: tie this array to ICustomizationProps, such that each array element is keyof ICustomizationProps\n  var DefaultFields = ['theme', 'styles', 'tokens'];\n  return Customizations.getSettings(fields || DefaultFields, displayName, context.customizations);\n}","/**\n * Functions used by Stack components to simplify style-related computations\n */\n// Helper function that converts a themed spacing key (if given) to the corresponding themed spacing value.\nvar _getThemedSpacing = function _getThemedSpacing(space, theme) {\n  if (theme.spacing.hasOwnProperty(space)) {\n    return theme.spacing[space];\n  }\n\n  return space;\n}; // Helper function that takes a gap as a string and converts it into a { value, unit } representation.\n\n\nvar _getValueUnitGap = function _getValueUnitGap(gap) {\n  var numericalPart = parseFloat(gap);\n  var numericalValue = isNaN(numericalPart) ? 0 : numericalPart;\n  var numericalString = isNaN(numericalPart) ? '' : numericalPart.toString();\n  var unitPart = gap.substring(numericalString.toString().length);\n  return {\n    value: numericalValue,\n    unit: unitPart || 'px'\n  };\n};\n/**\n * Takes in a gap size in either a CSS-style format (e.g. 10 or \"10px\")\n *  or a key of a themed spacing value (e.g. \"s1\").\n * Returns the separate numerical value of the padding (e.g. 10)\n *  and the CSS unit (e.g. \"px\").\n */\n\n\nexport var parseGap = function parseGap(gap, theme) {\n  if (gap === undefined || gap === '') {\n    return {\n      rowGap: {\n        value: 0,\n        unit: 'px'\n      },\n      columnGap: {\n        value: 0,\n        unit: 'px'\n      }\n    };\n  }\n\n  if (typeof gap === 'number') {\n    return {\n      rowGap: {\n        value: gap,\n        unit: 'px'\n      },\n      columnGap: {\n        value: gap,\n        unit: 'px'\n      }\n    };\n  }\n\n  var splitGap = gap.split(' '); // If the array has more than two values, then return 0px.\n\n  if (splitGap.length > 2) {\n    return {\n      rowGap: {\n        value: 0,\n        unit: 'px'\n      },\n      columnGap: {\n        value: 0,\n        unit: 'px'\n      }\n    };\n  } // If the array has two values, then parse each one.\n\n\n  if (splitGap.length === 2) {\n    return {\n      rowGap: _getValueUnitGap(_getThemedSpacing(splitGap[0], theme)),\n      columnGap: _getValueUnitGap(_getThemedSpacing(splitGap[1], theme))\n    };\n  } // Else, parse the numerical value and pass it as both the vertical and horizontal gap.\n\n\n  var calculatedGap = _getValueUnitGap(_getThemedSpacing(gap, theme));\n\n  return {\n    rowGap: calculatedGap,\n    columnGap: calculatedGap\n  };\n};\n/**\n * Takes in a padding in a CSS-style format (e.g. 10, \"10px\", \"10px 10px\", etc.)\n *  where the separate padding values can also be the key of a themed spacing value\n *  (e.g. \"s1 m\", \"10px l1 20px l2\", etc.).\n * Returns a CSS-style padding.\n */\n\nexport var parsePadding = function parsePadding(padding, theme) {\n  if (padding === undefined || typeof padding === 'number' || padding === '') {\n    return padding;\n  }\n\n  var paddingValues = padding.split(' ');\n\n  if (paddingValues.length < 2) {\n    return _getThemedSpacing(padding, theme);\n  }\n\n  return paddingValues.reduce(function (padding1, padding2) {\n    return _getThemedSpacing(padding1, theme) + ' ' + _getThemedSpacing(padding2, theme);\n  });\n};","import * as tslib_1 from \"tslib\";\nimport { parseGap, parsePadding } from './StackUtils';\nimport { getGlobalClassNames } from '../../Styling';\nvar nameMap = {\n  start: 'flex-start',\n  end: 'flex-end'\n};\nvar GlobalClassNames = {\n  root: 'ms-Stack',\n  inner: 'ms-Stack-inner'\n};\nexport var styles = function styles(props, theme, tokens) {\n  var _a, _b, _c, _d, _e, _f, _g;\n\n  var verticalFill = props.verticalFill,\n      horizontal = props.horizontal,\n      reversed = props.reversed,\n      gap = props.gap,\n      grow = props.grow,\n      wrap = props.wrap,\n      horizontalAlign = props.horizontalAlign,\n      verticalAlign = props.verticalAlign,\n      disableShrink = props.disableShrink,\n      className = props.className;\n  var classNames = getGlobalClassNames(GlobalClassNames, theme);\n  var childrenGap = tokens && tokens.childrenGap ? tokens.childrenGap : gap;\n  var maxHeight = tokens && tokens.maxHeight ? tokens.maxHeight : props.maxHeight;\n  var maxWidth = tokens && tokens.maxWidth ? tokens.maxWidth : props.maxWidth;\n  var padding = tokens && tokens.padding ? tokens.padding : props.padding;\n\n  var _h = parseGap(childrenGap, theme),\n      rowGap = _h.rowGap,\n      columnGap = _h.columnGap;\n\n  var horizontalMargin = \"\" + -0.5 * columnGap.value + columnGap.unit;\n  var verticalMargin = \"\" + -0.5 * rowGap.value + rowGap.unit; // styles to be applied to all direct children regardless of wrap or direction\n\n  var childStyles = {\n    textOverflow: 'ellipsis'\n  }; // selectors to be applied regardless of wrap or direction\n\n  var commonSelectors = {\n    // flexShrink styles are applied by the StackItem\n    '> *:not(.ms-StackItem)': {\n      flexShrink: disableShrink ? 0 : 1\n    }\n  };\n\n  if (wrap) {\n    return {\n      root: [classNames.root, {\n        flexWrap: 'wrap',\n        maxWidth: maxWidth,\n        maxHeight: maxHeight,\n        width: 'auto',\n        overflow: 'visible',\n        height: '100%'\n      }, horizontalAlign && (_a = {}, _a[horizontal ? 'justifyContent' : 'alignItems'] = nameMap[horizontalAlign] || horizontalAlign, _a), verticalAlign && (_b = {}, _b[horizontal ? 'alignItems' : 'justifyContent'] = nameMap[verticalAlign] || verticalAlign, _b), className, {\n        // not allowed to be overridden by className\n        // since this is necessary in order to prevent collapsing margins\n        display: 'flex'\n      }, horizontal && {\n        height: verticalFill ? '100%' : 'auto'\n      }],\n      inner: [classNames.inner, {\n        display: 'flex',\n        flexWrap: 'wrap',\n        marginLeft: horizontalMargin,\n        marginRight: horizontalMargin,\n        marginTop: verticalMargin,\n        marginBottom: verticalMargin,\n        overflow: 'visible',\n        boxSizing: 'border-box',\n        padding: parsePadding(padding, theme),\n        // avoid unnecessary calc() calls if horizontal gap is 0\n        width: columnGap.value === 0 ? '100%' : \"calc(100% + \" + columnGap.value + columnGap.unit + \")\",\n        maxWidth: '100vw',\n        selectors: tslib_1.__assign({\n          '> *': tslib_1.__assign({\n            margin: \"\" + 0.5 * rowGap.value + rowGap.unit + \" \" + 0.5 * columnGap.value + columnGap.unit\n          }, childStyles)\n        }, commonSelectors)\n      }, horizontalAlign && (_c = {}, _c[horizontal ? 'justifyContent' : 'alignItems'] = nameMap[horizontalAlign] || horizontalAlign, _c), verticalAlign && (_d = {}, _d[horizontal ? 'alignItems' : 'justifyContent'] = nameMap[verticalAlign] || verticalAlign, _d), horizontal && {\n        flexDirection: reversed ? 'row-reverse' : 'row',\n        // avoid unnecessary calc() calls if vertical gap is 0\n        height: rowGap.value === 0 ? '100%' : \"calc(100% + \" + rowGap.value + rowGap.unit + \")\",\n        selectors: {\n          '> *': {\n            maxWidth: columnGap.value === 0 ? '100%' : \"calc(100% - \" + columnGap.value + columnGap.unit + \")\"\n          }\n        }\n      }, !horizontal && {\n        flexDirection: reversed ? 'column-reverse' : 'column',\n        height: \"calc(100% + \" + rowGap.value + rowGap.unit + \")\",\n        selectors: {\n          '> *': {\n            maxHeight: rowGap.value === 0 ? '100%' : \"calc(100% - \" + rowGap.value + rowGap.unit + \")\"\n          }\n        }\n      }]\n    };\n  }\n\n  return {\n    root: [classNames.root, {\n      display: 'flex',\n      flexDirection: horizontal ? reversed ? 'row-reverse' : 'row' : reversed ? 'column-reverse' : 'column',\n      flexWrap: 'nowrap',\n      width: 'auto',\n      height: verticalFill ? '100%' : 'auto',\n      maxWidth: maxWidth,\n      maxHeight: maxHeight,\n      padding: parsePadding(padding, theme),\n      boxSizing: 'border-box',\n      selectors: tslib_1.__assign((_e = {\n        '> *': childStyles\n      }, _e[reversed ? '> *:not(:last-child)' : '> *:not(:first-child)'] = [horizontal && {\n        marginLeft: \"\" + columnGap.value + columnGap.unit\n      }, !horizontal && {\n        marginTop: \"\" + rowGap.value + rowGap.unit\n      }], _e), commonSelectors)\n    }, grow && {\n      flexGrow: grow === true ? 1 : grow,\n      overflow: 'hidden'\n    }, horizontalAlign && (_f = {}, _f[horizontal ? 'justifyContent' : 'alignItems'] = nameMap[horizontalAlign] || horizontalAlign, _f), verticalAlign && (_g = {}, _g[horizontal ? 'alignItems' : 'justifyContent'] = nameMap[verticalAlign] || verticalAlign, _g), className] // TODO: this cast may be hiding some potential issues with styling and name\n    //        lookups and should be removed\n\n  };\n};","import { getGlobalClassNames } from '../../../Styling';\nvar GlobalClassNames = {\n  root: 'ms-StackItem'\n};\nvar alignMap = {\n  start: 'flex-start',\n  end: 'flex-end'\n};\nexport var StackItemStyles = function StackItemStyles(props, theme, tokens) {\n  var grow = props.grow,\n      shrink = props.shrink,\n      disableShrink = props.disableShrink,\n      align = props.align,\n      verticalFill = props.verticalFill,\n      order = props.order,\n      className = props.className;\n  var classNames = getGlobalClassNames(GlobalClassNames, theme);\n  return {\n    root: [theme.fonts.medium, classNames.root, {\n      margin: tokens.margin,\n      height: verticalFill ? '100%' : 'auto',\n      width: 'auto'\n    }, grow && {\n      flexGrow: grow === true ? 1 : grow\n    }, (disableShrink || !grow && !shrink) && {\n      flexShrink: 0\n    }, shrink && !disableShrink && {\n      flexShrink: 1\n    }, align && {\n      alignSelf: alignMap[align] || align\n    }, order && {\n      order: order\n    }, className] // TODO: this cast may be hiding some potential issues with styling and name\n    //        lookups and should be removed\n\n  };\n};","/** @jsx withSlots */\nimport * as React from 'react';\nimport { withSlots, createComponent, getSlots } from '../../../Foundation';\nimport { StackItemStyles as styles } from './StackItem.styles';\n\nvar StackItemView = function StackItemView(props) {\n  var children = props.children;\n\n  if (React.Children.count(children) < 1) {\n    return null;\n  }\n\n  var Slots = getSlots(props, {\n    root: 'div'\n  });\n  return withSlots(Slots.root, null, children);\n};\n\nexport var StackItem = createComponent(StackItemView, {\n  displayName: 'StackItem',\n  styles: styles\n});\nexport default StackItem;","import * as tslib_1 from \"tslib\";\n/** @jsx withSlots */\n\nimport * as React from 'react';\nimport { withSlots, createComponent, getSlots } from '../../Foundation';\nimport { getNativeProps, htmlElementProperties, warnDeprecations } from '../../Utilities';\nimport { styles } from './Stack.styles';\nimport { StackItem } from './StackItem/StackItem';\nvar StackItemType = withSlots(StackItem, null).type;\n\nvar StackView = function StackView(props) {\n  var _a = props.as,\n      RootType = _a === void 0 ? 'div' : _a,\n      disableShrink = props.disableShrink,\n      wrap = props.wrap,\n      rest = tslib_1.__rest(props, [\"as\", \"disableShrink\", \"wrap\"]);\n\n  warnDeprecations('Stack', props, {\n    gap: 'tokens.childrenGap',\n    maxHeight: 'tokens.maxHeight',\n    maxWidth: 'tokens.maxWidth',\n    padding: 'tokens.padding'\n  });\n  var stackChildren = React.Children.map(props.children, function (child, index) {\n    if (!child) {\n      return null;\n    }\n\n    if (child.type === StackItemType) {\n      var defaultItemProps = {\n        shrink: !disableShrink\n      };\n      return React.cloneElement(child, tslib_1.__assign({}, defaultItemProps, child.props));\n    }\n\n    return child;\n  });\n  var nativeProps = getNativeProps(rest, htmlElementProperties);\n  var Slots = getSlots(props, {\n    root: RootType,\n    inner: 'div'\n  });\n\n  if (wrap) {\n    return withSlots(Slots.root, tslib_1.__assign({}, nativeProps), withSlots(Slots.inner, null, stackChildren));\n  }\n\n  return withSlots(Slots.root, tslib_1.__assign({}, nativeProps), stackChildren);\n};\n\nvar StackStatics = {\n  Item: StackItem\n};\nexport var Stack = createComponent(StackView, {\n  displayName: 'Stack',\n  styles: styles,\n  statics: StackStatics\n});\nexport default Stack;","import { getGlobalClassNames } from '@uifabric/styling';\nvar GlobalClassNames = {\n  root: 'ms-CardItem'\n};\nvar baseTokens = {\n  padding: 0\n};\nvar filledTokens = {\n  margin: 0\n};\nexport var CardItemTokens = function CardItemTokens(props, theme) {\n  return [baseTokens, props.fill && filledTokens];\n};\nexport var CardItemStyles = function CardItemStyles(props, theme, tokens) {\n  var classNames = getGlobalClassNames(GlobalClassNames, theme);\n  return {\n    root: [theme.fonts.large, classNames.root, {\n      margin: tokens.margin,\n      padding: tokens.padding\n    }]\n  };\n};","import { createComponent } from '@uifabric/foundation';\nimport { CardItemStyles as styles, CardItemTokens as tokens } from './CardItem.styles';\nimport { CardItemView } from './CardItem.view';\nexport var CardItem = createComponent(CardItemView, {\n  displayName: 'CardItem',\n  styles: styles,\n  tokens: tokens\n});\nexport default CardItem;","import * as tslib_1 from \"tslib\";\n/** @jsx withSlots */\n\nimport { withSlots, getSlots } from '@uifabric/foundation';\nimport { Stack } from 'office-ui-fabric-react';\nexport var CardItemView = function CardItemView(props) {\n  var Slots = getSlots(props, {\n    root: Stack.Item\n  });\n  return withSlots(Slots.root, tslib_1.__assign({}, props));\n};","import { getGlobalClassNames } from '@uifabric/styling';\nvar GlobalClassNames = {\n  root: 'ms-CardSection'\n};\nvar baseTokens = {\n  padding: 0\n};\nvar filledTokens = {\n  margin: 0\n};\nexport var CardSectionTokens = function CardSectionTokens(props, theme) {\n  return [baseTokens, props.fill && filledTokens];\n};\nexport var CardSectionStyles = function CardSectionStyles(props, theme, tokens) {\n  var classNames = getGlobalClassNames(GlobalClassNames, theme);\n  return {\n    root: [theme.fonts.large, classNames.root, {\n      margin: tokens.margin,\n      padding: tokens.padding\n    }]\n  };\n};","import { createComponent } from '@uifabric/foundation';\nimport { CardSectionStyles as styles, CardSectionTokens as tokens } from './CardSection.styles';\nimport { CardSectionView } from './CardSection.view';\nexport var CardSection = createComponent(CardSectionView, {\n  displayName: 'CardSection',\n  styles: styles,\n  tokens: tokens\n});\nexport default CardSection;","import * as tslib_1 from \"tslib\";\n/** @jsx withSlots */\n\nimport * as React from 'react';\nimport { withSlots, getSlots } from '@uifabric/foundation';\nimport { Stack } from 'office-ui-fabric-react';\nexport var CardSectionView = function CardSectionView(props) {\n  var children = props.children,\n      rest = tslib_1.__rest(props, [\"children\"]);\n\n  if (React.Children.count(children) < 1) {\n    return null;\n  }\n\n  var Slots = getSlots(props, {\n    root: Stack\n  });\n  return withSlots(Slots.root, tslib_1.__assign({}, rest), children);\n};","import { getGlobalClassNames, HighContrastSelector } from '@uifabric/styling';\nvar GlobalClassNames = {\n  root: 'ms-Card'\n};\n\nvar baseTokens = function baseTokens(props, theme) {\n  var effects = theme.effects;\n  return {\n    boxShadow: effects.elevation4,\n    childrenGap: 12,\n    childrenMargin: 0,\n    cursor: 'default',\n    height: 'inherit',\n    highContrastBoxShadow: '0 1.6px 3.6px 0 Highlight, 0 0.3px 0.9px 0 Highlight',\n    minHeight: '348px',\n    minWidth: '212px',\n    maxWidth: '286px'\n  };\n};\n\nvar compactTokens = {\n  height: 'auto',\n  minWidth: '300px',\n  maxWidth: '500px'\n};\n\nvar clickableTokens = function clickableTokens(props, theme) {\n  var effects = theme.effects;\n  return {\n    boxShadowHovered: effects.elevation8,\n    cursor: 'pointer',\n    highContrastBoxShadowHovered: '0 3.2px 7.2px 0 Highlight, 0 0.6px 1.8px 0 Highlight'\n  };\n};\n\nexport var CardTokens = function CardTokens(props, theme) {\n  return [baseTokens, props.compact && compactTokens, props.onClick && clickableTokens];\n};\nexport var CardStyles = function CardStyles(props, theme, tokens) {\n  var _a, _b;\n\n  var classNames = getGlobalClassNames(GlobalClassNames, theme);\n  return {\n    root: [classNames.root, {\n      borderRadius: '2px',\n      boxShadow: tokens.boxShadow,\n      cursor: tokens.cursor,\n      height: tokens.height,\n      width: tokens.width,\n      minWidth: tokens.minWidth,\n      maxWidth: tokens.maxWidth,\n      transition: 'box-shadow 0.5s ease',\n      selectors: (_a = {\n        ':hover': {\n          boxShadow: tokens.boxShadowHovered,\n          selectors: (_b = {}, _b[HighContrastSelector] = {\n            boxShadow: tokens.highContrastBoxShadowHovered\n          }, _b)\n        }\n      }, _a[HighContrastSelector] = {\n        boxShadow: tokens.highContrastBoxShadow\n      }, _a)\n    }]\n  };\n};","import { createComponent } from '@uifabric/foundation';\nimport { CardView } from './Card.view';\nimport { CardStyles as styles, CardTokens as tokens } from './Card.styles';\nimport { CardItem } from './CardItem/CardItem';\nimport { CardSection } from './CardSection/CardSection';\nvar CardStatics = {\n  Item: CardItem,\n  Section: CardSection\n};\nexport var Card = createComponent(CardView, {\n  displayName: 'Card',\n  styles: styles,\n  tokens: tokens,\n  statics: CardStatics\n});\nexport default Card;","import * as tslib_1 from \"tslib\";\n/** @jsx withSlots */\n\nimport * as React from 'react';\nimport { withSlots, getSlots } from '@uifabric/foundation';\nimport { getNativeProps, htmlElementProperties, warn } from '@uifabric/utilities';\nimport { Stack } from 'office-ui-fabric-react';\nimport { CardItem } from './CardItem/CardItem';\nimport { CardSection } from './CardSection/CardSection';\nexport var CardView = function CardView(props) {\n  var Slots = getSlots(props, {\n    root: Stack\n  });\n\n  var children = props.children,\n      styles = props.styles,\n      tokens = props.tokens,\n      compact = props.compact,\n      rest = tslib_1.__rest(props, [\"children\", \"styles\", \"tokens\", \"compact\"]);\n\n  var nativeProps = getNativeProps(rest, htmlElementProperties);\n  var CardItemType = withSlots(CardItem, null).type;\n  var CardSectionType = withSlots(CardSection, null).type; // Get childrenGap and childrenMargin token values.\n\n  var childrenGap = tokens && tokens.childrenGap;\n  var childrenMargin = tokens && tokens.childrenMargin;\n  var childrenCount = React.Children.count(children);\n  /* The map function below takes the Card children and applies the correct margin and gap tokens to them, ensuring at the same time that\n   * they are of type CardItem or CardSection. */\n\n  var cardChildren = React.Children.map(children, function (child, index) {\n    if (!child) {\n      return null;\n    } // Ensure that we're dealing with CardItems and CardSections and throw a warning otherwise.\n\n\n    if (child.type === CardItemType || child.type === CardSectionType) {\n      // Only compute and clone if childrenGap and/or childrenMargin were provided.\n      if (!childrenGap && !childrenMargin) {\n        return child;\n      }\n\n      var _a = child.props,\n          fill = _a.fill,\n          childTokens = _a.tokens,\n          childRest = tslib_1.__rest(_a, [\"fill\", \"tokens\"]);\n\n      var margin = 0;\n      /* If childrenMargin has been specified and the fill property is not present, make the appropriate calculations to get the resolved\n       * margin for this specific child depending on the type of Card (vertical vs compact) and the child position in the card (first\n       * child, in-between child or last child). */\n\n      if (childrenMargin && !fill) {\n        var firstMargin = index === 0 ? childrenMargin : 0;\n        var lastMargin = index === childrenCount - 1 ? childrenMargin : 0;\n        var verticalMargin = firstMargin + \"px \" + childrenMargin + \"px \" + lastMargin + \"px\";\n        var horizontalMargin = childrenMargin + \"px \" + lastMargin + \"px \" + childrenMargin + \"px \" + firstMargin + \"px\";\n        margin = compact ? horizontalMargin : verticalMargin;\n      }\n      /* Resolve tokens, sending childrenGap only if the child type is CardSection as CardItem doesn't have a childrenGap token in its\n       * type specification. We're sending childrenGap to CardSection so that elements inside a CardSection maintain the overall gap\n       * provided to the Card. */\n\n\n      var resolvedTokens = tslib_1.__assign({\n        margin: margin,\n        childrenGap: child.type === CardSectionType ? childrenGap : undefined\n      }, childTokens); // Clone the child with the correct tokens.\n\n\n      return React.cloneElement(child, tslib_1.__assign({\n        tokens: resolvedTokens\n      }, childRest));\n    }\n\n    warn('The children of a Card component should be of type CardItem or CardSection.');\n    return child;\n  });\n  return withSlots(Slots.root, tslib_1.__assign({}, nativeProps, {\n    horizontal: compact,\n    tokens: tokens,\n    verticalFill: true,\n    verticalAlign: \"space-between\",\n    horizontalAlign: \"space-between\"\n  }), cardChildren);\n};"],"sourceRoot":""}