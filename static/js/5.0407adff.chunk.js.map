{"version":3,"sources":["pages/WordsDone/useHooks.js","pages/WordsDone/index.js","pages/Homepage/Word.js","pages/Homepage/style.js"],"names":["ref","firestore","collection","enhance","connect","values","context","user","useState","loading","setLoading","words","setWords","useEffect","uid","where","onSnapshot","docSnapshot","wordsDone","forEach","docs","push","data","useWordsDone","width","length","HeadingScreen","title","style","padding","lineHeight","height","background","theme","color","secondary","borderRadius","position","overflow","display","alignItems","justifyContent","primary","left","zIndex","fontSize","fontWeight","fontFamily","font","family","map","w","i","Word","key","word","number","type","ref1","updateTypeDate","setW","to","status","text","top","right","bottom","icon","icons","check","size","onClick","newType","doc","get","then","snapshot","empty","id","update","add","role","WordLine","styled","Link","border","HeadingWrap","div","space"],"mappings":"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","file":"static/js/5.0407adff.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport { firestore } from '../../api';\n\nconst ref = firestore.collection('words_done');\n\nconst useWordsDone = user => {\n  const [loading, setLoading] = useState(true);\n  const [words, setWords] = useState([]);\n\n  useEffect(() => {\n    const { uid } = user;\n\n    ref.where('uid', '==', uid).onSnapshot(docSnapshot => {\n      const wordsDone = [];\n      setLoading(true);\n      docSnapshot.forEach(docs => wordsDone.push(docs.data()));\n\n      setWords(wordsDone);\n      setLoading(false);\n    });\n  }, [user]);\n\n  return [loading, words];\n};\n\n// eslint-disable-next-line\nexport { useWordsDone };\n","import React from 'react';\nimport HeadingScreen from '../../components/HeadingScreen';\nimport { useWordsDone } from './useHooks';\nimport connect from '../../state/connect';\nimport { Loading, Layout } from '../../components';\nimport Word from '../Homepage/Word';\nimport theme from '../../configs/theme';\n\nconst WordsDone = ({ user }: { user: any }) => {\n  const [loading, words] = useWordsDone(user);\n\n  if (loading) return <Loading />;\n\n  const width = `${(words.length / 3000) * 100}%`;\n\n  return (\n    <Layout>\n      <HeadingScreen title=\"Words done\" />\n\n      <div style={{ padding: '10px 30px 20px' }}>\n        <h2 style={{ lineHeight: 1.5 }}>I have been learned vocabulary</h2>\n\n        <div\n          style={{\n            height: 50,\n            background: theme.color.secondary,\n            borderRadius: 10,\n            position: 'relative',\n            overflow: 'hidden',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center'\n          }}\n        >\n          <div\n            style={{\n              width,\n              height: 50,\n              background: theme.color.primary,\n              position: 'absolute',\n              left: 0\n            }}\n          ></div>\n          <span\n            style={{\n              position: 'relative',\n              zIndex: 10,\n              fontSize: 20,\n              fontWeight: 700,\n              fontFamily: theme.font.family.secondary\n            }}\n          >{`${words.length}/3000`}</span>\n        </div>\n      </div>\n\n      <div>\n        {words.map((w, i) => (\n          <Word\n            key={w.word}\n            word={{ ...w, number: i, type: 'month' }}\n            type=\"month\"\n          />\n        ))}\n      </div>\n    </Layout>\n  );\n};\n\nconst enhance = connect([{ values: ['user'], context: 'authContext' }]);\n\nexport default enhance(WordsDone);\n","import React, { useState } from 'react';\n\nimport { Icon } from '../../components';\nimport icons from '../../assets/icons';\nimport { firestore } from '../../api';\nimport theme from '../../configs/theme';\nimport { WordLine } from './style';\nimport connect from '../../state/connect';\n\nconst ref = firestore.collection('user');\nconst ref1 = firestore.collection('words_done');\n\ntype WordProps = {\n  word: {\n    word: String,\n    status: String,\n    number: Number,\n    id: String\n  },\n  user: {\n    uid: String\n  },\n  type: String,\n  updateTypeDate: Function\n};\n\nconst Word = ({ word, type, user, updateTypeDate }: WordProps) => {\n  const [w, setW] = useState(word);\n\n  const { uid } = user;\n\n  const handleChangeType = () => {\n    const newType = () => {\n      if (type === 'today') {\n        return 'day';\n      }\n      if (type === 'day') {\n        return 'week';\n      }\n      if (type === 'week') {\n        return 'month';\n      }\n\n      return 'day';\n    };\n\n    ref\n      .doc(uid)\n      .collection('word_today')\n      .where('word', '==', w.word)\n      .get()\n      .then(snapshot => {\n        if (snapshot.empty) {\n          return null;\n        }\n\n        return snapshot.forEach(doc => {\n          ref\n            .doc(uid)\n            .collection('word_today')\n            .doc(doc.id)\n            .update({\n              type: newType()\n            });\n        });\n      });\n\n    setW({ ...w, type: newType() });\n\n    updateTypeDate({ ...w, type: newType() });\n\n    if (type === 'today') {\n      ref1.add({ ...word, uid, type: newType() });\n    } else {\n      ref1\n\n        .where('uid', '==', user.uid)\n        .get()\n        .then(snapshot => {\n          if (snapshot.empty) {\n            return null;\n          }\n\n          return snapshot.forEach(doc => {\n            ref1.doc(doc.id).update({\n              type: newType()\n            });\n          });\n        });\n    }\n  };\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <WordLine\n        to={`/word/${w.word}`}\n        key={w.word}\n        style={{\n          color: w.status ? theme.color.primary : theme.color.text\n        }}\n      >\n        <span>{w.number + 1}.</span>\n        {w.word}\n      </WordLine>\n\n      {w.status && w.type !== type && (\n        <div\n          style={{\n            position: 'absolute',\n            top: 0,\n            right: 0,\n            bottom: 0,\n            padding: '0 15px',\n            display: 'flex',\n            alignItems: 'center'\n          }}\n        >\n          <Icon icon={icons.check} size={20} color={theme.color.secondary} />\n        </div>\n      )}\n\n      {w.status && w.type === type && w.type !== 'month' && (\n        <div\n          onClick={handleChangeType}\n          style={{\n            position: 'absolute',\n            top: 0,\n            right: 0,\n            bottom: 0,\n            padding: '0 15px',\n            display: 'flex',\n            alignItems: 'center'\n          }}\n          role=\"presentation\"\n        >\n          <Icon icon={icons.right} size={20} color={theme.color.primary} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst select = [\n  { values: ['user'], context: 'authContext' },\n  {\n    values: ['updateTypeDate'],\n    context: 'wordContext'\n  }\n];\n\nexport default connect(select)(Word);\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport theme from '../../configs/theme';\n\nconst WordLine = styled(Link)`\n  height: 70px;\n  display: flex;\n  align-items: center;\n  font-size: 25px;\n  font-weight: 700;\n  padding: 15px;\n  border-bottom: 1px solid ${theme.color.border};\n  font-family: ${theme.font.family.secondary};\n\n  span {\n    text-align: center;\n    display: inline-block;\n    width: 50px;\n    margin-right: 30px;\n    color: rgba(0, 0, 0, 0.4);\n  }\n`;\n\nconst HeadingWrap = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: ${theme.size.space * 2}px ${theme.size.space * 2}px\n    ${theme.size.space}px ${theme.size.space * 2}px;\n`;\n\nconst Button = styled.div`\n  border: 1px solid ${theme.color.border};\n  height: 40px;\n  padding: 0 15px;\n  border-radius: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  background: #fff;\n`;\n\nexport { WordLine, HeadingWrap, Button };\n"],"sourceRoot":""}