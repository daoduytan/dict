{"version":3,"sources":["state/rootContext.js","state/connect.js","pages/Homepage/Word.js","pages/Homepage/style.js","pages/WordsDone/useHooks.js","pages/WordsDone/index.js"],"names":["context","authContext","wordContext","connect","select","Component","props","newProps","forEach","s","values","state","useContext","rootContext","element","flatProps","ref","firestore","collection","ref1","word","type","user","updateTypeDate","useState","w","setW","uid","style","position","to","key","color","status","theme","primary","text","number","top","right","bottom","padding","display","alignItems","icon","icons","check","size","secondary","onClick","newType","doc","where","get","then","snapshot","empty","id","update","add","role","WordLine","styled","Link","border","font","family","HeadingWrap","div","space","enhance","loading","setLoading","words","setWords","useEffect","onSnapshot","docSnapshot","wordsDone","docs","push","data","useWordsDone","width","length","HeadingScreen","title","lineHeight","height","background","borderRadius","overflow","justifyContent","left","zIndex","fontSize","fontWeight","fontFamily","map","i","Word"],"mappings":"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","file":"static/js/4.444b3eb4.chunk.js","sourcesContent":["import wordContext from './wordContext';\nimport authContext from './authContext';\n\nconst context = {\n  authContext,\n  wordContext\n};\n\nexport default context;\n","// @flow\nimport { forEach } from 'lodash/fp';\nimport React, { useContext } from 'react';\nimport rootContext from './rootContext';\n\nconst connect = select => Component => props => {\n  let newProps = {};\n\n  forEach(s => {\n    if (s.context) {\n      const { values, context } = s;\n\n      const state = useContext(rootContext[context]);\n      values.forEach(element => {\n        newProps = { ...newProps, [element]: state[element] };\n      });\n    }\n  }, select);\n\n  const flatProps = { ...props, ...newProps };\n\n  return <Component {...flatProps} />;\n};\n\nexport default connect;\n","import React, { useState } from 'react';\n\nimport { Icon } from '../../components';\nimport icons from '../../assets/icons';\nimport { firestore } from '../../api';\nimport theme from '../../configs/theme';\nimport { WordLine } from './style';\nimport connect from '../../state/connect';\n\nconst ref = firestore.collection('user');\nconst ref1 = firestore.collection('words_done');\n\ntype WordProps = {\n  word: {\n    word: String,\n    status: String,\n    number: Number,\n    id: String\n  },\n  user: {\n    uid: String\n  },\n  type: String,\n  updateTypeDate: Function\n};\n\nconst Word = ({ word, type, user, updateTypeDate }: WordProps) => {\n  const [w, setW] = useState(word);\n\n  const { uid } = user;\n\n  const handleChangeType = () => {\n    const newType = () => {\n      if (type === 'today') {\n        return 'day';\n      }\n      if (type === 'day') {\n        return 'week';\n      }\n      if (type === 'week') {\n        return 'month';\n      }\n\n      return 'day';\n    };\n\n    ref\n      .doc(uid)\n      .collection('word_today')\n      .where('word', '==', w.word)\n      .get()\n      .then(snapshot => {\n        if (snapshot.empty) {\n          return null;\n        }\n\n        return snapshot.forEach(doc => {\n          ref\n            .doc(uid)\n            .collection('word_today')\n            .doc(doc.id)\n            .update({\n              type: newType()\n            });\n        });\n      });\n\n    setW({ ...w, type: newType() });\n\n    updateTypeDate({ ...w, type: newType() });\n\n    if (type === 'today') {\n      ref1.add({ ...word, uid, type: newType() });\n    } else {\n      ref1\n\n        .where('uid', '==', user.uid)\n        .get()\n        .then(snapshot => {\n          if (snapshot.empty) {\n            return null;\n          }\n\n          return snapshot.forEach(doc => {\n            ref1.doc(doc.id).update({\n              type: newType()\n            });\n          });\n        });\n    }\n  };\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <WordLine\n        to={`/word/${w.word}`}\n        key={w.word}\n        style={{\n          color: w.status ? theme.color.primary : theme.color.text\n        }}\n      >\n        <span>{w.number + 1}.</span>\n        {w.word}\n      </WordLine>\n\n      {w.status && w.type !== type && (\n        <div\n          style={{\n            position: 'absolute',\n            top: 0,\n            right: 0,\n            bottom: 0,\n            padding: '0 15px',\n            display: 'flex',\n            alignItems: 'center'\n          }}\n        >\n          <Icon icon={icons.check} size={20} color={theme.color.secondary} />\n        </div>\n      )}\n\n      {w.status && w.type === type && w.type !== 'month' && (\n        <div\n          onClick={handleChangeType}\n          style={{\n            position: 'absolute',\n            top: 0,\n            right: 0,\n            bottom: 0,\n            padding: '0 15px',\n            display: 'flex',\n            alignItems: 'center'\n          }}\n          role=\"presentation\"\n        >\n          <Icon icon={icons.right} size={20} color={theme.color.primary} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst select = [\n  { values: ['user'], context: 'authContext' },\n  {\n    values: ['updateTypeDate'],\n    context: 'wordContext'\n  }\n];\n\nexport default connect(select)(Word);\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport theme from '../../configs/theme';\n\nconst WordLine = styled(Link)`\n  height: 70px;\n  display: flex;\n  align-items: center;\n  font-size: 25px;\n  font-weight: 700;\n  padding: 15px;\n  border-bottom: 1px solid ${theme.color.border};\n  font-family: ${theme.font.family.secondary};\n\n  span {\n    text-align: center;\n    display: inline-block;\n    width: 50px;\n    margin-right: 30px;\n    color: rgba(0, 0, 0, 0.4);\n  }\n`;\n\nconst HeadingWrap = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background: #fff;\n  padding: ${theme.size.space * 2}px ${theme.size.space * 2}px\n    ${theme.size.space}px ${theme.size.space * 2}px;\n`;\n\nconst Button = styled.div`\n  border: 1px solid ${theme.color.border};\n  height: 40px;\n  padding: 0 15px;\n  border-radius: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  background: #fff;\n`;\n\nexport { WordLine, HeadingWrap, Button };\n","import { useState, useEffect } from 'react';\nimport { firestore } from '../../api';\n\nconst ref = firestore.collection('words_done');\n\nconst useWordsDone = user => {\n  const [loading, setLoading] = useState(true);\n  const [words, setWords] = useState([]);\n\n  useEffect(() => {\n    const { uid } = user;\n\n    ref.where('uid', '==', uid).onSnapshot(docSnapshot => {\n      const wordsDone = [];\n      setLoading(true);\n      docSnapshot.forEach(docs => wordsDone.push(docs.data()));\n\n      setWords(wordsDone);\n      setLoading(false);\n    });\n  }, [user]);\n\n  return [loading, words];\n};\n\n// eslint-disable-next-line\nexport { useWordsDone };\n","import React from 'react';\nimport HeadingScreen from '../../components/HeadingScreen';\nimport { useWordsDone } from './useHooks';\nimport connect from '../../state/connect';\nimport { Loading, Layout } from '../../components';\nimport Word from '../Homepage/Word';\nimport theme from '../../configs/theme';\n\nconst WordsDone = ({ user }: { user: any }) => {\n  const [loading, words] = useWordsDone(user);\n\n  if (loading) return <Loading />;\n\n  const width = `${(words.length / 3000) * 100}%`;\n\n  return (\n    <Layout>\n      <HeadingScreen title=\"Words done\" />\n\n      <div style={{ padding: '10px 30px 20px' }}>\n        <h2 style={{ lineHeight: 1.5 }}>I have been learned vocabulary</h2>\n\n        <div\n          style={{\n            height: 50,\n            background: theme.color.secondary,\n            borderRadius: 10,\n            position: 'relative',\n            overflow: 'hidden',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center'\n          }}\n        >\n          <div\n            style={{\n              width,\n              height: 50,\n              background: theme.color.primary,\n              position: 'absolute',\n              left: 0\n            }}\n          ></div>\n          <span\n            style={{\n              position: 'relative',\n              zIndex: 10,\n              fontSize: 20,\n              fontWeight: 700,\n              fontFamily: theme.font.family.secondary\n            }}\n          >{`${words.length}/3000`}</span>\n        </div>\n      </div>\n\n      <div>\n        {words.map((w, i) => (\n          <Word\n            key={w.word}\n            word={{ ...w, number: i, type: 'month' }}\n            type=\"month\"\n          />\n        ))}\n      </div>\n    </Layout>\n  );\n};\n\nconst enhance = connect([{ values: ['user'], context: 'authContext' }]);\n\nexport default enhance(WordsDone);\n"],"sourceRoot":""}